{"version":3,"sources":["constants.ts","components/Stage/Cell/Styles.ts","tetrominos.ts","components/Stage/Cell/index.tsx","components/Stage/Styles.ts","components/GameOver/Styles.ts","components/GameOver/index.tsx","components/Stage/contants.ts","components/Stage/index.tsx","components/Game/Styles.ts","utils/array.ts","components/Stage/createStage.ts","hooks/usePlayer.ts","utils/math.ts","hooks/useStage.ts","hooks/useInterval.ts","hooks/useGameStatus.ts","components/ScoreBoard/Display/Styles.ts","components/ScoreBoard/Display/index.tsx","components/ScoreBoard/Styles.ts","components/Button/Styles.ts","components/Button/index.tsx","components/ScoreBoard/index.tsx","utils/time.ts","components/Game/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Direction","KeysActions","StyledCell","styled","div","color","TETROMINOS","shape","getKeys","tetrominos","Object","keys","fromEntries","entries","slice","withoutEmpty","randomTetromino","randomTetrominoKey","Math","floor","random","length","console","log","DUPA","Cell","type","StyledStage","height","width","StyledGameOver","GameOver","score","className","NO_COLLISION_WITH_ANOTHER_TETROMINO","STAGE","WIDTH","HEIGHT","EMPTY_CELL","NO_TETROMINO","Stage","stage","gameOver","map","row","rowIndex","cell","cellIndex","cellKey","tetrominoType","StyledGameWrapper","StyledGame","fillWith","array","filling","fill","STAGE_ROWS","Array","STAGE_COLUMNS","createStage","from","checkCollision","player","moveX","x","moveY","y","collision","tetromino","yIndex","xIndex","currentVerticalPosition","position","currentHorizontalPosition","nextMoveDown","nextHorizontalMove","LINE_POINTS","initialPlayerFeatures","stageWidth","collided","usePlayer","useState","setPlayer","resetTetromino","useCallback","prev","direction","clonedPlayer","JSON","parse","stringify","tetrominoShape","transposedTetromino","_","index","column","transposeTetromino","RIGHT","reverse","rotate","pos","offset","sweepRows","newStage","setClearRows","reduce","acc","filledRow","findIndex","findRowToClear","rows","unshift","addEmptyRowAtTheTop","push","updateStage","previousStage","drawStage","rowValue","Yindex","cellValue","Xindex","tetrominoStatus","drawTetrominor","useStage","setStage","clearedRows","setClearedRows","useEffect","useInterval","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useGameStatus","setScore","setRows","level","setLevel","calculateScore","pointsEarned","countPoints","rowsClearedSoFar","StyledDisplay","Display","text","value","StyledScoreBoard","aside","StyledButton","button","Button","onClick","children","ScoreBoard","startGame","calculateDropTime","Game","dropTime","setDropTime","setGameOver","updateTetrominoPosition","rotateTetromino","moveTetrominoDownAndCheckLevelAndGameStatus","moveTetrominoHorizontally","moveToPosition","moveDownOnce","keyActions","ARROW_LEFT","LEFT","ARROW_RIGHT","ARROW_DOWN","ARROW_UP","role","tabIndex","onKeyDown","event","key","action","onKeyUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26c6baee.chunk.js","sourcesContent":["export enum Direction {\r\n  LEFT = -1,\r\n  RIGHT = 1,\r\n}\r\n\r\nexport enum KeysActions {\r\n  ARROW_LEFT = \"ArrowLeft\",\r\n  ARROW_RIGHT = \"ArrowRight\",\r\n  ARROW_DOWN = \"ArrowDown\",\r\n  ARROW_UP = \"ArrowUp\",\r\n}\r\n\r\nexport const ONE_SECOND = 1000;\r\nexport const TIME_OFFSET = 200;\r\n\r\nexport const EMPTY = 0;\r\nexport const STARTING_LEVEL = 1;\r\n\r\nexport const LINE_POINTS = [40, 100, 300, 1200]; // https://tetris.wiki/Scoring\r\n","import styled from \"styled-components\";\r\n\r\ninterface Props {\r\n  color: string;\r\n  type: string | number;\r\n}\r\n\r\nexport const StyledCell = styled.div<Props>`\r\n  width: auto;\r\n  background: rgba(${({ color }) => color}, 0.8);\r\n  border: 4px solid;\r\n  border-top-color: ${({ color }) => `rgba(${color}, 0.8)`};\r\n  border-left-color: ${({ color }) => `rgba(${color}, 0.8)`};\r\n  border-right-color: ${({ color }) => `rgba(${color}, 0.2)`};\r\n  border-bottom-color: ${({ color }) => `rgba(${color}, 0.2)`};\r\n`;\r\n","const EMPTY = 0;\r\n\r\nexport type TetrominoCellType = number | string;\r\nexport type TetrominoRowType = Array<TetrominoCellType>;\r\nexport type TetrominoShapeType = Array<TetrominoRowType>;\r\ntype Tetromino = {\r\n  [key: string]: { shape: TetrominoShapeType; color: string };\r\n};\r\n\r\nexport const TETROMINOS: Tetromino = {\r\n  [EMPTY]: { shape: [[0]], color: \"0, 0, 0\" },\r\n  I: {\r\n    shape: [\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n    ],\r\n    color: \"0, 255, 255\",\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0],\r\n    ],\r\n    color: \"0,0,255\",\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"],\r\n    ],\r\n    color: \"255, 170, 0\",\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"],\r\n    ],\r\n    color: \"255,255,0\",\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"0,255,0\",\r\n  },\r\n  T: {\r\n    shape: [\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, \"T\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"170,0,255\",\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"255,0,0\",\r\n  },\r\n};\r\n\r\nconst withoutEmpty = (tetrominos: Tetromino) =>\r\n  Object.fromEntries(Object.entries(tetrominos).slice(1));\r\n\r\nconst getKeys = (tetrominos: Tetromino) =>\r\n  Object.keys(withoutEmpty(tetrominos));\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = getKeys(TETROMINOS);\r\n\r\n  const randomTetrominoKey =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n\r\n  console.log({ DUPA: TETROMINOS[randomTetrominoKey] });\r\n\r\n  return TETROMINOS[randomTetrominoKey];\r\n};\r\n","import React from \"react\";\r\nimport { StyledCell } from \"./Styles\";\r\nimport { TETROMINOS } from \"../../../tetrominos\";\r\n\r\ninterface Props {\r\n  type: number | string;\r\n}\r\n\r\nconst Cell: React.FC<Props> = ({ type }) => {\r\n  const { color } = TETROMINOS[type] || {};\r\n\r\n  return <StyledCell color={color} type={type} />;\r\n};\r\n\r\nexport default Cell;\r\n","import styled from \"styled-components\";\r\n\r\ninterface Props {\r\n  height: number;\r\n  width: number;\r\n}\r\n\r\nexport const StyledStage = styled.div<Props>`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${({ height }) => height},\r\n    calc(25vw / ${({ width }) => width})\r\n  );\r\n  grid-template-columns: repeat(${({ width }) => width}, 1fr);\r\n  grid-gap: 1px;\r\n  border 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n  position: relative;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledGameOver = styled.div`\r\n  background: rgba(0, 0, 0, 0.7);\r\n  color: red;\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  z-index: 9;\r\n\r\n  .text {\r\n    top: 50%;\r\n    left: 50%;\r\n    font-size: 1.2em;\r\n    position: absolute;\r\n    font-weight: 600;\r\n    transform: translate(-50%, -50%);\r\n    text-align: center;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledGameOver } from \"./Styles\";\r\n\r\ninterface Props {\r\n  score: number;\r\n}\r\n\r\nconst GameOver: React.FC<Props> = ({ score }) => (\r\n  <StyledGameOver>\r\n    <div className=\"text\">\r\n      <div>GAME OVER</div>\r\n      <div>score: {score}</div>\r\n    </div>\r\n  </StyledGameOver>\r\n);\r\n\r\nexport default GameOver;\r\n","import { TETROMINOS } from \"../../tetrominos\";\r\n\r\nexport const CLEAN_CELL = 0;\r\n\r\nexport const CELL_TYPE_INDEX = 0;\r\nexport const CELL_STATUS_INDEX = 1;\r\n\r\nexport const NO_COLLISION_WITH_ANOTHER_TETROMINO = \"clear\";\r\nexport const HAS_COLLISION_WITH_ANOTHER_TETROMINO = \"merged\";\r\n\r\nexport const STAGE = {\r\n  WIDTH: 12,\r\n  HEIGHT: 20,\r\n  EMPTY_CELL: [CLEAN_CELL, NO_COLLISION_WITH_ANOTHER_TETROMINO],\r\n};\r\n\r\nexport const NO_TETROMINO = TETROMINOS[0].shape;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport { StyledStage } from \"./Styles\";\r\nimport GameOver from \"../GameOver\";\r\nimport { CELL_TYPE_INDEX } from \"./contants\";\r\n\r\nexport type StageCellType = Array<number | string>;\r\nexport type StageRowType = Array<StageCellType>;\r\nexport type StageType = Array<StageRowType>;\r\ninterface Props {\r\n  stage: StageType;\r\n  gameOver: boolean;\r\n  score: number;\r\n}\r\n\r\nconst Stage: React.FC<Props> = ({ stage = [], gameOver, score }) => (\r\n  <StyledStage width={stage[0]?.length} height={stage?.length}>\r\n    {gameOver && <GameOver score={score} />}\r\n    {stage.map((row: StageRowType, rowIndex: number) =>\r\n      row.map((cell: StageCellType, cellIndex: number) => {\r\n        const cellKey = `cell-${rowIndex}-${cellIndex}`;\r\n        const tetrominoType = cell[CELL_TYPE_INDEX];\r\n\r\n        return <Cell key={cellKey} type={tetrominoType} />;\r\n      })\r\n    )}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledGameWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: #ccc;\r\n`;\r\n\r\nexport const StyledGame = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: baseline;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 180px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","export const fillWith = (array: any[], filling: any) => array.fill(filling);\r\n","import {\r\n  STAGE,\r\n  CLEAN_CELL,\r\n  CELL_STATUS_INDEX,\r\n  NO_COLLISION_WITH_ANOTHER_TETROMINO,\r\n} from \"./contants\";\r\nimport { fillWith } from \"../../utils/array\";\r\nimport { IPlayer, IPosition } from \"../../hooks/usePlayer\";\r\nimport { StageType } from \".\";\r\nimport { TetrominoCellType, TetrominoRowType } from \"../../tetrominos\";\r\n\r\nconst STAGE_ROWS = Array(20);\r\nconst STAGE_COLUMNS = Array(12);\r\n\r\nexport const createStage = () =>\r\n  Array.from(STAGE_ROWS, () => fillWith(STAGE_COLUMNS, STAGE.EMPTY_CELL));\r\n\r\nexport const checkCollision = (\r\n  player: IPlayer,\r\n  stage: StageType,\r\n  { x: moveX, y: moveY }: IPosition\r\n) => {\r\n  let collision = false;\r\n\r\n  player.tetromino.map((row: TetrominoRowType, yIndex: number) =>\r\n    row.map((cell: TetrominoCellType, xIndex: number) => {\r\n      const emptyCellValue = cell === CLEAN_CELL;\r\n\r\n      if (emptyCellValue) {\r\n        // eslint-disable-next-line array-callback-return\r\n        return;\r\n      }\r\n\r\n      const currentVerticalPosition = yIndex + player.position.y;\r\n      const currentHorizontalPosition = xIndex + player.position.x;\r\n\r\n      const nextMoveDown = currentVerticalPosition + moveY;\r\n      const nextHorizontalMove = currentHorizontalPosition + moveX;\r\n\r\n      const hasCollision =\r\n        !stage[nextMoveDown] ||\r\n        !stage[currentVerticalPosition][nextHorizontalMove] ||\r\n        stage[nextMoveDown][nextHorizontalMove][CELL_STATUS_INDEX] !==\r\n          NO_COLLISION_WITH_ANOTHER_TETROMINO;\r\n\r\n      if (hasCollision) {\r\n        collision = true;\r\n      }\r\n    })\r\n  );\r\n\r\n  return collision;\r\n};\r\n","import { useState, useCallback } from \"react\";\r\nimport { randomTetromino } from \"../tetrominos\";\r\nimport { TetrominoShapeType } from \"../tetrominos\";\r\nimport { checkCollision } from \"../components/Stage/createStage\";\r\nimport { StageType } from \"../components/Stage\";\r\nimport { calculatecenterStage, transposeTetromino } from \"../utils/math\";\r\nimport { NO_TETROMINO, STAGE } from \"../components/Stage/contants\";\r\nimport { Direction } from \"../constants\";\r\n\r\nexport interface IPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IPlayer {\r\n  position: IPosition;\r\n  tetromino: TetrominoShapeType;\r\n  collided: boolean;\r\n}\r\n\r\nconst initialPlayerFeatures = () => ({\r\n  position: { x: calculatecenterStage(STAGE.WIDTH), y: 0 },\r\n  tetromino: randomTetromino().shape,\r\n  collided: false,\r\n});\r\n\r\nconst rotate = (tetrominoShape: TetrominoShapeType, direction: Direction) => {\r\n  const transposedTetromino = transposeTetromino(tetrominoShape);\r\n\r\n  if (direction === Direction.RIGHT) {\r\n    return transposedTetromino.map((row) => row.reverse());\r\n  }\r\n\r\n  return transposedTetromino.reverse();\r\n};\r\n\r\nconst usePlayer = () => {\r\n  const [player, setPlayer] = useState<IPlayer>({\r\n    ...initialPlayerFeatures(),\r\n    tetromino: NO_TETROMINO,\r\n  });\r\n\r\n  const rotateTetromino = (stage: StageType, direction: Direction) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction);\r\n    const pos = player.position.x;\r\n    let offset = 1;\r\n\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.position.x += offset; // if collision\r\n      offset = -(offset + (offset > 0 ? 1 : -1)); // if still collision add more offset left or right\r\n\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        clonedPlayer.position.x = pos;\r\n        return;\r\n      }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updateTetrominoPosition = ({ x, y }: IPosition, collided: boolean) => {\r\n    setPlayer((prev) => ({\r\n      ...prev,\r\n      position: { x: (prev.position.x += x), y: (prev.position.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetTetromino = useCallback(() => {\r\n    setPlayer(initialPlayerFeatures());\r\n  }, []);\r\n\r\n  return [\r\n    player,\r\n    updateTetrominoPosition,\r\n    resetTetromino,\r\n    rotateTetromino,\r\n  ] as const;\r\n};\r\n\r\nexport default usePlayer;\r\n","import { TetrominoRowType, TetrominoShapeType } from \"../tetrominos\";\r\n\r\nexport const sum = (a: number, b: number) => a + b;\r\n\r\nexport const increment = (a: number) => a + 1;\r\n\r\nexport const calculatecenterStage = (stageWidth: number) => stageWidth / 2 - 2;\r\n\r\nexport const transposeTetromino = (tetrominoShape: TetrominoShapeType) =>\r\n  tetrominoShape.map((_, index) =>\r\n    tetrominoShape.map((column: TetrominoRowType) => column[index])\r\n  );\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../components/Stage/createStage\";\r\nimport { IPlayer } from \"./usePlayer\";\r\nimport { StageType, StageRowType, StageCellType } from \"../components/Stage\";\r\nimport { TetrominoRowType, TetrominoCellType } from \"../tetrominos\";\r\nimport {\r\n  STAGE,\r\n  NO_COLLISION_WITH_ANOTHER_TETROMINO,\r\n  HAS_COLLISION_WITH_ANOTHER_TETROMINO,\r\n  CELL_TYPE_INDEX,\r\n  CELL_STATUS_INDEX,\r\n  CLEAN_CELL,\r\n} from \"../components/Stage/contants\";\r\nimport { EMPTY } from \"../constants\";\r\nimport { increment } from \"../utils/math\";\r\nimport { fillWith } from \"../utils/array\";\r\n\r\ntype ResetTetrominoType = () => void;\r\n\r\ntype IncrementCallbackType = (n: number) => number;\r\ntype SetClearRowsType = (callback: IncrementCallbackType) => void;\r\n\r\nconst drawStage = (previousStage: StageType) =>\r\n  previousStage?.map((row: StageRowType) =>\r\n    row.map((cell: StageCellType) =>\r\n      cell[CELL_STATUS_INDEX] === NO_COLLISION_WITH_ANOTHER_TETROMINO\r\n        ? STAGE.EMPTY_CELL\r\n        : cell\r\n    )\r\n  );\r\n\r\nconst drawTetrominor = (player: IPlayer, newStage: StageType) => {\r\n  player.tetromino.map((rowValue: TetrominoRowType, Yindex: number) =>\r\n    rowValue.map((cellValue: TetrominoCellType, Xindex: number) => {\r\n      if (cellValue === CLEAN_CELL) {\r\n        // eslint-disable-next-line array-callback-return\r\n        return;\r\n      }\r\n      const currentVerticalPosition = Yindex + player.position.y;\r\n      const currentHorizontalPosition = Xindex + player.position.x;\r\n      const tetrominoStatus = player.collided\r\n        ? HAS_COLLISION_WITH_ANOTHER_TETROMINO\r\n        : NO_COLLISION_WITH_ANOTHER_TETROMINO;\r\n\r\n      newStage[currentVerticalPosition][currentHorizontalPosition] = [\r\n        cellValue,\r\n        tetrominoStatus,\r\n      ];\r\n    })\r\n  );\r\n};\r\n\r\nconst findRowToClear = (row: StageRowType) =>\r\n  row.findIndex(\r\n    (cell: StageCellType) => cell[CELL_TYPE_INDEX] === CLEAN_CELL\r\n  ) === -1;\r\n\r\nconst addEmptyRowAtTheTop = (acc: StageType, stage: StageType) =>\r\n  acc.unshift(fillWith(new Array(stage[0].length), STAGE.EMPTY_CELL));\r\n\r\nconst sweepRows = (newStage: StageType, setClearRows: SetClearRowsType) =>\r\n  newStage.reduce((acc: StageType, row: StageRowType) => {\r\n    const filledRow = findRowToClear(row);\r\n\r\n    if (filledRow) {\r\n      setClearRows((rows: number) => increment(rows));\r\n\r\n      addEmptyRowAtTheTop(acc, newStage);\r\n      return acc;\r\n    }\r\n\r\n    acc.push(row);\r\n    return acc;\r\n  }, []);\r\n\r\nconst updateStage = (\r\n  player: IPlayer,\r\n  previousStage: StageType,\r\n  resetTetromino: ResetTetrominoType,\r\n  setClearRows: SetClearRowsType\r\n) => {\r\n  const newStage = drawStage(previousStage);\r\n  drawTetrominor(player, newStage);\r\n\r\n  if (player.collided) {\r\n    resetTetromino();\r\n    return sweepRows(newStage, setClearRows);\r\n  }\r\n\r\n  return newStage;\r\n};\r\n\r\nconst useStage = (player: IPlayer, resetTetromino: ResetTetrominoType) => {\r\n  const [stage, setStage] = useState<StageType>(createStage());\r\n  const [clearedRows, setClearedRows] = useState(EMPTY);\r\n\r\n  useEffect(() => {\r\n    setClearedRows(EMPTY);\r\n\r\n    setStage((prev: StageType) =>\r\n      updateStage(player, prev, resetTetromino, setClearedRows)\r\n    );\r\n  }, [player, resetTetromino]);\r\n\r\n  return [stage, setStage, clearedRows] as const;\r\n};\r\n\r\nexport default useStage;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\ntype IntervalCallback = () => unknown | void;\r\n\r\nconst useInterval = (callback: IntervalCallback, delay: number | null) => {\r\n  const savedCallback = useRef<IntervalCallback | null>(null);\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      if (savedCallback.current) {\r\n        savedCallback.current();\r\n      }\r\n    };\r\n\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n\r\nexport default useInterval;\r\n","import { useState, useCallback, useEffect } from \"react\";\r\nimport { LINE_POINTS, EMPTY } from \"../constants\";\r\nimport { sum } from \"../utils/math\";\r\n\r\nconst countPoints = (\r\n  pointsEarned: number,\r\n  clearedRows: number,\r\n  level: number\r\n) => pointsEarned + LINE_POINTS[clearedRows - 1] * level;\r\n\r\nexport const useGameStatus = (clearedRows: number) => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(1);\r\n\r\n  const calculateScore = useCallback(() => {\r\n    if (clearedRows > EMPTY) {\r\n      setScore((pointsEarned) => countPoints(pointsEarned, clearedRows, level));\r\n      setRows((rowsClearedSoFar) => sum(rowsClearedSoFar, clearedRows));\r\n    }\r\n  }, [level, clearedRows]);\r\n\r\n  useEffect(() => {\r\n    calculateScore();\r\n  }, [calculateScore, clearedRows, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel] as const;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  padding: 10px 20px;\r\n  width: 100%;\r\n  background: #1c1c1c;\r\n  color: #ececec;\r\n  box-sizing: border-box;\r\n\r\n  .text {\r\n    padding-right: 4px;\r\n    width: 60px;\r\n  }\r\n\r\n  .value {\r\n    font-size: 1.4em;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledDisplay } from \"./Styles\";\r\n\r\ninterface Props {\r\n  text: string;\r\n  value: number;\r\n}\r\n\r\nconst Display: React.FC<Props> = ({ text, value }) => (\r\n  <StyledDisplay>\r\n    <div className=\"text\">{text}:</div>\r\n    <div className=\"value\">{value}</div>\r\n  </StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledScoreBoard = styled.aside`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  max-width: 120px;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled.button`\r\n  width: 100%;\r\n  padding: 10px 0;\r\n  letter-spacing: 0.2em;\r\n  font-size: 1.2em;\r\n  font-weight: 500;\r\n  color: #1c1c1c;\r\n  border: solid 1px #1c1c1c;\r\n  transition-property: border-color, background-color, color;\r\n  transition-duration: 0.25s;\r\n  transition-timing-function: ease-in-out;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: #ececec;\r\n    background: #808080;\r\n    border-color: #808080;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledButton } from \"./Styles\";\r\n\r\ninterface Props {\r\n  children: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst Button: React.FC<Props> = ({ onClick, children }) => (\r\n  <StyledButton onClick={onClick}>{children}</StyledButton>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Display from \"./Display\";\r\nimport { StyledScoreBoard } from \"./Styles\";\r\nimport Button from \"../Button\";\r\n\r\ninterface Props {\r\n  score: number;\r\n  rows: number;\r\n  level: number;\r\n  startGame: () => void;\r\n}\r\n\r\nconst ScoreBoard: React.FC<Props> = ({ score, rows, level, startGame }) => (\r\n  <StyledScoreBoard>\r\n    <Display text=\"Score\" value={score} />\r\n    <Display text=\"Rows\" value={rows} />\r\n    <Display text=\"Level\" value={level} />\r\n    <Button onClick={startGame}>START</Button>\r\n  </StyledScoreBoard>\r\n);\r\n\r\nexport default ScoreBoard;\r\n","import { ONE_SECOND, TIME_OFFSET } from \"../constants\";\r\n\r\nexport const calculateDropTime = (level: number) =>\r\n  ONE_SECOND / level + TIME_OFFSET;\r\n","import React, { useState } from \"react\";\r\nimport Stage, { StageType } from \"../Stage\";\r\nimport { StyledGameWrapper, StyledGame } from \"./Styles\";\r\nimport usePlayer from \"../../hooks/usePlayer\";\r\nimport useStage from \"../../hooks/useStage\";\r\nimport { createStage } from \"../Stage/createStage\";\r\nimport { checkCollision } from \"../Stage/createStage\";\r\nimport useInterval from \"../../hooks/useInterval\";\r\nimport { useGameStatus } from \"../../hooks/useGameStatus\";\r\nimport ScoreBoard from \"../ScoreBoard\";\r\nimport {\r\n  Direction,\r\n  KeysActions,\r\n  ONE_SECOND,\r\n  STARTING_LEVEL,\r\n  EMPTY,\r\n} from \"../../constants\";\r\nimport { calculateDropTime } from \"../../utils/time\";\r\n\r\ntype KeyAction = () => void;\r\n\r\nconst Game: React.FC = () => {\r\n  const [dropTime, setDropTime] = useState<number | null>(null);\r\n  const [gameOver, setGameOver] = useState<boolean>(false);\r\n  const [player, updateTetrominoPosition, resetTetromino, rotateTetromino] =\r\n    usePlayer();\r\n  const [stage, setStage, clearedRows] = useStage(player, resetTetromino);\r\n  const [score, setScore, rows, setRows, level, setLevel] =\r\n    useGameStatus(clearedRows);\r\n\r\n  useInterval(() => {\r\n    moveTetrominoDownAndCheckLevelAndGameStatus();\r\n  }, dropTime);\r\n\r\n  const startGame = () => {\r\n    setStage(createStage());\r\n    setDropTime(calculateDropTime(level));\r\n    resetTetromino();\r\n    setGameOver(false);\r\n    setScore(EMPTY);\r\n    setRows(EMPTY);\r\n    setLevel(STARTING_LEVEL);\r\n  };\r\n\r\n  const moveTetrominoHorizontally = (direction: Direction) => {\r\n    const moveToPosition = { x: direction, y: 0 };\r\n\r\n    if (!checkCollision(player, stage, moveToPosition)) {\r\n      updateTetrominoPosition(moveToPosition, false);\r\n    }\r\n  };\r\n\r\n  const moveTetrominoDownAndCheckLevelAndGameStatus = () => {\r\n    const nextLevel = rows > level * 5;\r\n\r\n    if (nextLevel) {\r\n      setLevel((level) => level + 1);\r\n      setDropTime(calculateDropTime(level));\r\n    }\r\n\r\n    const moveDownOnce = { x: 0, y: 1 };\r\n    const collision = checkCollision(player, stage, moveDownOnce);\r\n\r\n    if (collision) {\r\n      const collisionOnTheTopOfTheStage = player.position.y < 1;\r\n      if (collisionOnTheTopOfTheStage) {\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n\r\n      const dontMove = { x: 0, y: 0 };\r\n      updateTetrominoPosition(dontMove, true);\r\n\r\n      return;\r\n    }\r\n    updateTetrominoPosition(moveDownOnce, false);\r\n  };\r\n\r\n  const dropTetromino = () => {\r\n    setDropTime(null);\r\n    moveTetrominoDownAndCheckLevelAndGameStatus();\r\n  };\r\n\r\n  const keyActions = (stage: StageType): { [key: string]: KeyAction } => ({\r\n    [KeysActions.ARROW_LEFT]: () => moveTetrominoHorizontally(Direction.LEFT),\r\n    [KeysActions.ARROW_RIGHT]: () => moveTetrominoHorizontally(Direction.RIGHT),\r\n    [KeysActions.ARROW_DOWN]: () => dropTetromino(),\r\n    [KeysActions.ARROW_UP]: () => rotateTetromino(stage, Direction.RIGHT),\r\n  });\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent) => {\r\n    if (gameOver) {\r\n      return;\r\n    }\r\n\r\n    const { key } = event;\r\n    const action = keyActions(stage)[key];\r\n\r\n    if (typeof action === \"function\") {\r\n      action();\r\n    }\r\n  };\r\n\r\n  const handleKeyUp = (event: React.KeyboardEvent) => {\r\n    const { key } = event;\r\n\r\n    if (!gameOver && key === KeysActions.ARROW_DOWN) {\r\n      setDropTime(ONE_SECOND);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledGameWrapper\r\n      role=\"button\"\r\n      tabIndex={0}\r\n      onKeyDown={handleKeyDown}\r\n      onKeyUp={handleKeyUp}\r\n    >\r\n      <StyledGame>\r\n        <Stage stage={stage} gameOver={gameOver} score={score} />\r\n        <ScoreBoard\r\n          score={score}\r\n          level={level}\r\n          rows={rows}\r\n          startGame={startGame}\r\n        />\r\n      </StyledGame>\r\n    </StyledGameWrapper>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport Game from \"./components/Game\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}